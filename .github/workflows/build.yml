name: build-ucore-custom
on:
  schedule:
    - cron: 0 4 * * 6  # Once a week on Saturday morning
  workflow_dispatch:

env:
    IMAGE_REGISTRY: ghcr.io/${{ github.repository_owner }}

concurrency:
  group: ${{ github.workflow }}-${{ github.ref || github.run_id }}
  cancel-in-progress: true

jobs:
  generate-matrix:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.discover-containerfiles.outputs.matrix }}
    steps:
      - name: Checkout
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5

      - name: Discover Containerfiles
        id: discover-containerfiles
        run: |
          containerfiles=$(ls Containerfile.* | sed 's/Containerfile.//')
          matrix="{\"include\":["
          first=true
          for file in $containerfiles; do
            if [ "$first" = true ]; then
              first=false
            else
              matrix+=","
            fi
            full_image=$(grep '^FROM ' Containerfile.$file | awk '{print $2}')
            from_image=$(echo $full_image | awk -F/ '{print $NF}' | awk -F: '{print $1}')
            from_image_tag=$(echo $full_image | awk -F: '{print $2}' | awk -F@ '{print $1}')
            image_without_tag=$(echo "$full_image" | sed 's/:[^@]*/@/')
            matrix+="{\"name\":\"$file\", \"from_image\":\"$from_image\", \"from_image_tag\":\"$from_image_tag\", \"full_image\":\"$full_image\", \"image_without_tag\":\"$image_without_tag\"}"
          done
          matrix+="]}"
          echo "Matrix: $matrix"
          echo "matrix=$matrix" >> $GITHUB_OUTPUT


  push-ghcr:
    name: custom image
    needs: generate-matrix
    runs-on: ubuntu-latest
    # trunk-ignore(checkov/CKV2_GHA_1)
    permissions:
      contents: read
      packages: write
      id-token: write
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.generate-matrix.outputs.matrix) }}
    steps:
      - name: Checkout
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5

      - name: Matrix Variables
        shell: bash
        run: |
          export CONTAINERFILE=Containerfile.${{ matrix.name }}
          export FROM_IMAGE=${{ matrix.from_image }}
          export FROM_IMAGE_TAG=${{ matrix.from_image_tag }}
          export FULL_IMAGE=${{ matrix.full_image }}
          export IMAGE_WITHOUT_TAGS=${{ matrix.image_without_tags }}
          echo "CONTAINERFILE=$CONTAINERFILE" >> $GITHUB_ENV
          echo "FROM_IMAGE=$FROM_IMAGE" >> $GITHUB_ENV
          echo "FROM_IMAGE_TAG=$FROM_IMAGE_TAG" >> $GITHUB_ENV
          echo "FULL_IMAGE=$FULL_IMAGE" >> $GITHUB_ENV
          echo "IMAGE_WITHOUT_TAGS=$IMAGE_WITHOUT_TAGS" >> $GITHUB_ENV

      - name: Verify base image
        uses: EyeCantCU/cosign-action/verify@58722a084c82190b57863002d494c91eabbe9e79 # v0.3.0
        with:
          containers: ${{ env.FROM_IMAGE }}:${{ env.FROM_IMAGE_TAG }}

      - name: Generate tags
        id: generate-tags
        shell: bash
        run: |
          # Generate a timestamp for creating an image version history
          TIMESTAMP="$(date +%Y%m%d)"
          VARIANT="${{ matrix.name }}"

          COMMIT_TAGS=()
          BUILD_TAGS=()

          # Have tags for tracking builds during pull request
          SHA_SHORT="${GITHUB_SHA::7}"
          COMMIT_TAGS+=("pr-${{ github.event.number }}-${VARIANT}")
          COMMIT_TAGS+=("${SHA_SHORT}-${VARIANT}")

          BUILD_TAGS=("${VARIANT}")

          # Append matching timestamp tags to keep a version history
          for TAG in "${BUILD_TAGS[@]}"; do
              BUILD_TAGS+=("${TAG}-${TIMESTAMP}")
          done

          if [[ "${{ github.event_name }}" == "pull_request" ]]; then
              echo "Generated the following commit tags: "
              for TAG in "${COMMIT_TAGS[@]}"; do
                  echo "${TAG}"
              done

              alias_tags=("${COMMIT_TAGS[@]}")
          else
              alias_tags=("${BUILD_TAGS[@]}")
          fi

          echo "Generated the following build tags: "
          for TAG in "${BUILD_TAGS[@]}"; do
              echo "${TAG}"
          done

          echo "alias_tags=${alias_tags[*]}" >> $GITHUB_OUTPUT

      - name: Get current version
        id: labels
        run: |
          ver=$(skopeo inspect docker://${{ env.IMAGE_WITHOUT_TAGS }} | jq -r '.Labels["org.opencontainers.image.version"]')
          echo "IMAGE_NAME_VERSION=$ver" >> $GITHUB_ENV

      # Build metadata
      - name: Image Metadata
        uses: docker/metadata-action@c1e51972afc2121e065aed6d45c65596fe445f3f # v5
        id: meta
        with:
          images: |
            ${{ env.FROM_IMAGE }}
          labels: |
            org.opencontainers.image.title=${{ env.FROM_IMAGE }}
            org.opencontainers.image.version=${{ env.IMAGE_NAME_VERSION }}
            org.opencontainers.image.description=Custom ${{ env.FROM_IMAGE }}
            io.artifacthub.package.readme-url=https://raw.githubusercontent.com/auricom/ucore-custom/main/README.md

      # Build image using Buildah action
      - name: Build Image
        id: build_image
        uses: redhat-actions/buildah-build@7a95fa7ee0f02d552a32753e7414641a04307056 # v2
        with:
          build-args: HOST=${{ matrix.name }}
          containerfiles: |
            ./${{ env.CONTAINERFILE }}
          # Postfix image name with -custom to make it a little more descriptive
          # Syntax: https://docs.github.com/en/actions/learn-github-actions/expressions#format
          image: ${{ env.FROM_IMAGE }}
          tags: |
            ${{ steps.generate-tags.outputs.alias_tags }}
          labels: ${{ steps.meta.outputs.labels }}
          oci: false

      # Workaround bug where capital letters in your GitHub username make it impossible to push to GHCR.
      # https://github.com/macbre/push-to-ghcr/issues/12
      - name: Lowercase Registry
        id: registry_case
        uses: ASzc/change-string-case-action@d0603cd0a7dd490be678164909f65c7737470a7f # v6
        with:
          string: ${{ env.IMAGE_REGISTRY }}

      - name: Login to GitHub Container Registry
        if: github.event_name != 'pull_request'
        run: |
          echo ${{ secrets.GITHUB_TOKEN }} | podman login ghcr.io -u ${{ github.actor }} --password-stdin
          echo ${{ secrets.GITHUB_TOKEN }} | docker login ghcr.io -u ${{ github.actor }} --password-stdin

      # Push the image to GHCR (Image Registry)
      - name: Push To GHCR
        uses: Wandalen/wretry.action@e68c23e6309f2871ca8ae4763e7629b9c258e1ea # v3.8.0
        id: push
        with:
          attempt_limit: 3
          attempt_delay: 15000
          command: |
            set -euox pipefail

            for tag in ${{ steps.generate-tags.outputs.alias_tags }}; do
              podman push ${{ steps.build_image.outputs.image }}:${tag} ${{ steps.registry_case.outputs.lowercase }}/${{ steps.build_image.outputs.image }}:${tag}
            done

            digest=$(skopeo inspect docker://${{ steps.registry_case.outputs.lowercase }}/${{ steps.build_image.outputs.image }}:${{ matrix.name }} --format '{{.Digest}}')

            echo "digest=${digest}" >> $GITHUB_OUTPUT

      # Sign container
      - uses: sigstore/cosign-installer@faadad0cce49287aee09b3a48701e75088a2c6ad # v4.0.0
        if: github.event_name != 'pull_request'

      - name: Sign container image with keypair
        if: github.event_name != 'pull_request'
        run: |
          cosign sign -y --key env://COSIGN_PRIVATE_KEY ${{ steps.registry_case.outputs.lowercase }}/${{ steps.build_image.outputs.image }}@${TAGS}
        env:
          TAGS: ${{ steps.push.outputs.outputs && fromJSON(steps.push.outputs.outputs).digest }}
          COSIGN_EXPERIMENTAL: false
          COSIGN_PRIVATE_KEY: ${{ secrets.SIGNING_SECRET }}

      - name: Echo outputs
        if: github.event_name != 'pull_request'
        run: |
          echo "${{ toJSON(steps.push.outputs) }}"